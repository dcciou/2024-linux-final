#include <stdio.h>
#include <stdint.h>
#include <time.h>

float multiplyByTwo(float num) {
    uint32_t* bits = (uint32_t*) &num;
    uint32_t exponent = (*bits >> 23) & 0xFF;  // 提取指數部分

    if (exponent == 0 || exponent == 0xFF) {
        return num;  // 處理特殊值：零，無窮大，或NaN
    }

    int newExponent = (int)exponent + 1;  

    if (newExponent >= 0xFF) {
        *bits = (*bits & 0x80000000) | 0x7F800000;  // 溢位處理
    } else {
        *bits = (*bits & 0x807FFFFF) | (newExponent << 23);  // 更新指数
    }

    return num;
}

float multiplyByEight(float num) {
    uint32_t* bits = (uint32_t*) &num;
    uint32_t exponent = (*bits >> 23) & 0xFF;  // 提取指數部分

    if (exponent == 0 || exponent == 0xFF) {
        return num;  // 處理特殊值：零，無窮大，或NaN
    }

    int newExponent = (int)exponent + 3;  // 乘以8 等於指數加3

    if (newExponent >= 0xFF) {
        *bits = (*bits & 0x80000000) | 0x7F800000;  // 溢位處理
    } else {
        *bits = (*bits & 0x807FFFFF) | (newExponent << 23);  // 更新指数
    }

    return num;
}

int main() {
    float value;
    printf("Enter a floating-point number: ");
    scanf("%f", &value);

    const int iterations = 10000;  // 重複一萬次
    clock_t start, end;
    double cpu_time_used;

    start = clock();

    for (int i = 0; i < iterations; i++) {
        float resultByEight = multiplyByEight(value);
        float resultByTwo = multiplyByTwo(value);
        float finalResult = resultByEight + resultByTwo;  // 實際上這裡的finalResult 只用於最後一次迭代
    }

    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

    printf("Original value: %f\n", value);
    printf("Time used for 100 million operations: %f seconds\n", cpu_time_used);

    return 0;
}



